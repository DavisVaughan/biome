// R Un-Grammar.
//
// This grammar specifies the structure of R's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree

SyntaxElement = SyntaxElement

RBogus = SyntaxElement*
RBogusValue = SyntaxElement*
RBogusParameter = SyntaxElement*

RRoot =
	bom: 'UNICODE_BOM'?
	expressions: RExpressionList
	eof: 'EOF'

RIdentifier =
	name: 'ident'

RBinaryExpression =
    left: AnyRExpression
    operator_token: (
    	'+'
	)
    right: AnyRExpression

// TODO: `\\` is not a valid Ident and causes issues with codegen
RFunctionDefinition =
	'function'
	parameters: RParameters
	body: AnyRExpression

RParameters =
	'('
	items: RParameterList
	')'

RParameterList = (AnyRParameter (',' AnyRParameter)*)

AnyRParameter =
	RParameter
	| RBogusParameter

// TODO: Default values
RParameter = RIdentifier

RExpressionList = AnyRExpression*

AnyRExpression =
	RIdentifier
	| RBinaryExpression
	| RFunctionDefinition
	| RStringValue
	| RIntegerValue
	| RDoubleValue
	| RLogicalValue
	| RNullValue
	| RBogusValue

RIntegerValue = value: 'r_integer_value'
RDoubleValue = value: 'r_double_value'
RStringValue = value: 'r_string_value'
RLogicalValue = value: 'r_logical_value'
RNullValue = value: 'r_null_value'
